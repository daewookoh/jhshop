// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL || "https://rmyeyouheztcvepjleah.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJteWV5b3VoZXp0Y3ZlcGpsZWFoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc4NDY2MDgsImV4cCI6MjA3MzQyMjYwOH0.r90vuNGWhI1TMQ2CSTuRMU0ikQqywPlcG73dk2tg2b4";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: typeof window !== 'undefined' ? localStorage : undefined,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce', // PKCE 플로우 사용으로 보안 강화
  },
  global: {
    headers: {
      'X-Client-Info': 'magic-shop-app',
    },
  },
  db: {
    schema: 'public',
  },
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
});

// Supabase 연결 상태 모니터링은 AuthContext에서 처리

// 타임아웃 래퍼 함수
export const addTimeout = (promise: Promise<any>, timeoutMs: number = 30000) => {
  const timeoutPromise = new Promise((_, reject) => {
    setTimeout(() => reject(new Error(`Request timeout after ${timeoutMs}ms`)), timeoutMs);
  });
  
  return Promise.race([promise, timeoutPromise]).catch((error) => {
    console.error('Supabase operation failed:', error);
    throw error;
  });
};